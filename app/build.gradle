apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.github.triplet.play'
apply plugin: 'checkstyle'

play {
    track = 'internal'
    resolutionStrategy = 'ignore'
    defaultToAppBundles = true
    serviceAccountCredentials = rootProject.file('signing/play-account.json')
}

checkstyle {
    toolVersion = '8.26'
}

task checkstyle(type: Checkstyle) {
    group 'verification'
    configFile rootProject.file('checkstyle.xml')
    source 'src/main/java'
    ignoreFailures false
    showViolations true
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

afterEvaluate {
    if (project.tasks.findByName('check')) {
        check.dependsOn('checkstyle')
    }
}

android {
    compileSdkVersion versions.compile_sdk
    buildToolsVersion versions.build_tools
    defaultConfig {
        applicationId 'net.simno.klingar'
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.target_sdk
        versionCode 1105
        versionName '0.13'
        buildConfigField 'String', 'CAST_APP_ID', '\"631E34EA\"'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    signingConfigs {
        release {
            storeFile rootProject.file('signing/app-upload.jks')
            storePassword System.getenv('STORE_PASSWORD')
            keyAlias System.getenv('KEY_ALIAS')
            keyPassword System.getenv('KEY_PASSWORD')
        }
    }
    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.mediarouter:mediarouter:${versions.androidx.mediarouter}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx.recyclerview}"

    implementation "com.bluelinelabs:conductor:${versions.conductor}"
    implementation "com.bluelinelabs:conductor-rxlifecycle2:${versions.conductor}"

    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${versions.glide}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${versions.glide}@aar"

    implementation "com.google.android.exoplayer:exoplayer-core:${versions.exoplayer}"
    implementation "com.google.android.exoplayer:extension-okhttp:${versions.exoplayer}"
    implementation "com.google.android.gms:play-services-cast-framework:${versions.play_services.cast}"
    implementation "com.google.android.gms:play-services-oss-licenses:${versions.play_services.oss}"
    implementation "com.google.android.material:material:${versions.androidx.material}"

    implementation "com.google.auto.value:auto-value-annotations:${versions.autovalue}"
    annotationProcessor "com.google.auto.value:auto-value:${versions.autovalue}"
    testAnnotationProcessor "com.google.auto.value:auto-value:${versions.autovalue}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:${versions.automoshi}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${versions.autoparcel}"
    implementation "com.ryanharter.auto.value:auto-value-parcel-adapter:${versions.autoparcel}"

    implementation "com.google.dagger:dagger:${versions.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${versions.dagger}"

    implementation "com.jakewharton:butterknife:${versions.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${versions.butterknife}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.jakewharton.rxrelay2:rxrelay:${versions.rxrelay}"

    implementation "com.squareup.moshi:moshi:${versions.moshi}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation("com.squareup.retrofit2:converter-simplexml:${versions.retrofit}") {
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
        exclude group: 'xpp3', module: 'xpp3'
    }

    implementation "com.trello.rxlifecycle2:rxlifecycle:${versions.rxlifecycle}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:${versions.rxlifecycle}"

    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-object-watcher-android:${versions.leakcanary}"

    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.hamcrest:hamcrest-library:${versions.hamcrest}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
}
